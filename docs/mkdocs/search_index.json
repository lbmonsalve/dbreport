{
    "docs": [
        {
            "location": "/", 
            "text": "DBReport\n\n\n\n\nIs a \nXojo/(Real Basic)\n component for reports.\n\n\nSee here\n by Bernardo Monsalve.\n\n\nIntroduction\n\n\nDBReport is a Xojo (formerly known as Realbasic) component to create, edit and print reports in runtime; unlike Xojo Report which is good enough for simple reporting from databases, however don\u2019t have an editor in runtime, formulas, parameters and other features. \n\n\nMain features\n\n\n\n\nEdit report in runtime. \n\n\nReport definition to .xml or String (to save in a DB field). \n\n\nPreview of report. \n\n\nView dataset of records. \n\n\nWidth, height, margins set or import from printer. \n\n\nReport Header, Report Footer, Page Header, Pager Footer and group bands. \n\n\nLabels, fields, lines, rectangles, images, charts (bar, line,pie), barcodes. \n\n\nSum, count and subtotal functions. \n\n\nFormulas. \n\n\nParameters. \n\n\nSubReports. \n\n\n\n\nRequirements\n\n\nDBReport is pure Xojo (RealBasic) code, don't need plug-ins (however can use \nBarcodeMBS\n and \nDynaPDFMBS\n), tested from RealStudio 2011r4 to Xojo 2017r1.1. Cocoa framework on MacOS is required. You need a registration code which is obtained (for free or open-source projects) by sending an email to lbmonsalve at outlook.com, otherwise works in DEMO mode.\n\n\nAdding the component\n\n\nAdding Component\n\n\n\n\nDownload the zip file, extract files. \n\n\nOpen Xojo (RealStudio) project or create one. \n\n\nAdd DBReport* files from DBReport folder. You can add one-by-one using File\u2192Import or drag'n drop folder or files to project's tab. \n\n\n\n\nRegister the component\n\n\nWhile the component is not registered works in DEMO mode, which meaning when print it, shows \"*demo*\" randomly. To register the component, add the next code just one time (perhaps on App.Open event) before use: \n\n\nDBReport.Register= \nYOUR REGISTER CODE...\n\n\n\n\n\n\n\nReport structure\n\n\nA report consists of bands that have elements which are stored in a definition file or a text string. The report is usually assigned a recordset from database and is printed or displayed on screen. \n\n\nBands\n\n\nTo understand how the DBReport works we need to understand the concept of bands. \n\n\nA band is a box where we put objects, the most important band is \nDetail\n which is the only one who can not erase. This (Detail) is printed for each row or record of the RecordSet, eg. if we have 10 rows or records we have 10 bands Detail. \n\n\nThe band \nPage header\n is printed first in the top of the page for each page in the report generated. \n\n\nThe band \nPage footer\n is printed on the bottom of the page for each page in the report generated. \n\n\nThe band \nReport header\n is printed after the band page header on the first page of the report. \n\n\nThe band \nReport footer\n is printed just after the last band printed on the final page of the report. \n\n\nGroup bands are bands that are printed before the band \nDetail\n like \nGroup Header\n and then like \nGroup Footer\n. They print to change the group (field of a recordset) or at the beginning of the report in the case of Group Header or end of the report in case of Group Footer. You can have as many group bands as needed. \n\n\nElements\n\n\nThe objects that can be placed in the bands are: \n\n\n\n\nLabels\n: are texts like \u201cTitle Report\u201d or the system date as \u201c#date\u201d or page number like \u201c#pag\u201d or parameters or formulas. \n\n\nFields\n: field of Recordset like \u201cname\u201d or \u201cid\u201d. \n\n\nLines\n: horizontal, vertical or oblique. \n\n\nRectangles\n boxes or rounded rectangles. \n\n\nBarcodes\n. \n\n\nImages\n: Can be an image file, parameter or a RecordSet field. \n\n\nCharts\n: Bar, lines, pie. \n\n\nSubReports\n. \n\n\n\n\nNote: Use XojoScript (RBScript) in formulas with \u201cSetValue EXPRESSION\u201d like: \n\n\nSetValue (10+5)* RecNum+ (2* .1* RecNum)\n' or\nSetValue \nString\n\n' or\nSetValue ElementName* ParameterName\n' or\nSetValue Left(FieldName1, 10)+ \n \n+ FieldName2\n' or\nIf FieldName1.InStr(\ncad\n)= 0 Then\n    SetValue \nNo Contains cad\n\nElse\n    SetValue \nContains cad\n\nEnd\n\n\n\n\nParameters\n\n\nA parameter is assigned before calling the Designer or Print (\u201cLogo\u201d is an example, may be called as you want):\n\n\nrpt.Parameter(\nLogo\n)= PictureObject\nrpt.Parameter(\nCompanyName\n)= \nMy Company Name\n\n\n\n\n\nProperties\n\n\nA property in DBReport is a special data used outside of report for whatever you want, example: save the database name or SQL string. Is used as metadata of report, but not in report itself. \n\n\nrpt.Prop(\nsqlString\n)= \nSELECT * FROM table\n\nrpt.Prop(\ndatabaseName\n)= \nMyDB\n\n\n\n\n\nXML Definition file\n\n\nThe definition of report is in XML structure, you can change the extension of file whatever you like. This is an example: \n\n\n?xml version=\n1.0\n encoding=\nUTF-8\n?\n\n\nDBReport Version=\n1.3.1007\n\n  \nSubReport\n\n    \nBand id=\n1\n Name=\nReporHeader1\n Type=\n30\n/\n\n    \nBand id=\n2\n Name=\nDetail\n Height=\n20\n/\n\n    \nBand id=\n3\n Name=\nReportFooter1\n Type=\n40\n Height=\n58\n/\n\n    \nElement id=\n4\n Name=\nElement1\n BandId=\n1\n Left=\n2\n Top=\n7\n Value=\nTitle of report\n OrderToShow=\n0\n/\n\n    \nElement id=\n5\n Name=\nElement2\n DataField=\nname\n BandId=\n2\n Left=\n4\n Top=\n3\n Type=\n20\n OrderToShow=\n0\n/\n\n    \nElement id=\n6\n Name=\nElement3\n BandId=\n1\n Left=\n455\n Top=\n11\n Value=\n#pag\n OrderToShow=\n1\n/\n\n    \nElement id=\n7\n Name=\nElement4\n BandId=\n3\n Left=\n235\n Top=\n3\n Value=\n#date\n AlignH=\n1\n OrderToShow=\n0\n/\n\n  \n/SubReport\n\n\n/DBReport\n\n\n\n\n\nXML Preferences file\n\n\nDBReport saves preferences like position of Designer window or zoom in a preferences.xml file in: SpecialFolder.ApplicationData.Child(\"DBReport\").\n\n\n\n\nExamples\n\n\nModify report\n\n\nRecordSet variable \"rs\" must be exist.\n\n\nDim rpt As New DBReport\n\nDim f as FolderItem= SpecialFolder.Documents.Child(\nDBReport1.xml\n)\nrpt.LoadXML(f)\nrpt.RecordSet= rs\nrpt.Designer\nrpt.SaveXML(f)\n\n\n\n\nIf you want store the definition of report on string variable:\n\n\nDim rpt As New DBReport\n\nrpt.LoadXML(StringVariable)\nrpt.RecordSet= rs\nrpt.Designer\nStringVariable= rpt.GetXML()\n\n\n\n\nPrint report\n\n\nDim rpt As DBReport\nDim f as FolderItem= SpecialFolder.Documents.Child(\nDBReport1.xml\n)\n\nrpt= New DBReport(f, rs)\n\nrpt.Print\n\n\n\n\nPreview report\n\n\nThe report and RecordSet must be exist and assign RecordSet to report. Add \"DBReportPreview\" controlContainer to a window, assign report to controlContainer: \n\n\nDBReportPreview1.Report(rptVariable)\n\n\n\n\nOther form to use\n\n\nDBReportDesignerControl and DBReportPreview are ControlContainers, you can place on a Window, set it and used like another control eg. TextField or TextArea. \n\n\nYou can add DBReportDesignerControl to a window and set report with: \nDBReportDesignerControl1.Report(rpt)\n, you need save the changes with a button with action like: \nrpt.SaveXML(f)\n. Maybe another button for print. \n\n\nAlso you can create reports by coding:\n\n\nDim sRpt As New DBReportSubReport\n\nDim bnd As New DBReportBand\nbnd.Name= \nPageHeader\n\nbnd.Type= Int32(DBReportBand.BandType.PageHeader)\nsRpt.BandAdd(bnd)\n\nDim ele As New DBReportElement\nele.BandId= bnd.Id\nele.Type= Int32(DBReportElement.ElementType.Label)\nele.Value= \nTitle\n\nsRpt.ElementAdd(ele)\n\nbnd= New DBReportBand\nbnd.Name= \nDetail1\n\nbnd.Type= Int32(DBReportBand.BandType.Detail)\nbnd.Height= 20\nsRpt.BandAdd(bnd)\n\nele= New DBReportElement\nele.BandId= bnd.Id\nele.Type= Int32(DBReportElement.ElementType.Field)\nele.DataField= \nname\n\nele.Left= 30\nele.Top= 1\nele.Width= 300\nele.HeightExpand= True\nsRpt.ElementAdd(ele)\n\nbnd= New DBReportBand\nbnd.Name= \nPageFooter\n\nbnd.Type= Int32(DBReportBand.BandType.PageFooter)\nbnd.Height= 58\nsRpt.BandAdd(bnd)\n\nele= New DBReportElement\nele.BandId= bnd.Id\nele.Type= Int32(DBReportElement.ElementType.Label)\nele.Value= \n#pag\n\nsRpt.ElementAdd(ele)\n\nDim rpt As New DBReport\nrpt.SubReportAdd(sRpt)\n\n\n\n\n\n\nTutorial: Basic\n\n\nThis tutorial is basic use of DBReport. The goal is create two buttons, one for designer and other for print a report. \n\n\nRequirements\n\n\n\n\nDBReport component. \n\n\nA sample SQLite database (sakila database is used for this tutorial, is found in \ndownloaded\n file). \n\n\n\n\nWalkthrough\n\n\n\n\nCreate a project. \n\n\nAdd DBReport component. \n\n\nAdd SQLite database. \n\n\nAdd a button, change caption to \"Designer\". \n\n\nAdd code for Designer to Action event. \n\n\nAdd a button, change caption to \"Print\". \n\n\nAdd code for Print to Action event. \n\n\nRun app. \n\n\nClick on Designer button. \n\n\nAdd labels and fields to report. \n\n\nClose designer window. \n\n\nClick on Print button. \n\n\n\n\nA video show an example \nhere\n.\n\n\nCode for Designer button\n\n\nDim f As FolderItem= SpecialFolder.Desktop.Child(\nDBReportTut01.xml\n)\nDim r As Recordset= sakila.SQLSelect(\nSELECT * FROM customer\n)\n\nDim rpt As New DBReport(f, r)\nrpt.Designer\nrpt.SaveXML(f)\n\n\n\n\nCode for Print button\n\n\nDim f As FolderItem= SpecialFolder.Desktop.Child(\nDBReportTut01.xml\n)\nDim r As Recordset= sakila.SQLSelect(\nSELECT * FROM customer\n)\n\nDim rpt As New DBReport(f, r)\n\nrpt.Print\n\n\n\n\nTutorial: Add reports\n\n\nThis tutorial adds a report to existing app. The goal is create a menuItem for design and print. Use the EddiesElectronics desktop app, On \"Project chooser\" window select Examples, \"Sample Applications\"/EddiesElectronics/Desktop folder and open EEDesktop.xojo_binary_project file. \n\n\nRequirements\n\n\n\n\nDBReport component. \n\n\nEEDesktop example app.\n\n\n\n\nWalkthrough\n\n\n\n\nOpen EEDesktop app from \"Project chooser\" window. \n\n\nAdd DBReport component. \n\n\nAdd menuItem to File menu on MainMenuBar. \n\n\nChange Name to \"FilePrintCustomers\". \n\n\nChange Text to \"Print customers\". \n\n\nNavigate to \"Menu Handlers\" from CustomerDetailWindow. \n\n\nAdd \"Menu Handler\" event. \n\n\nChoose FilePrintCustomers from MenuItem name. \n\n\nAdd code for Designer. \n\n\nRun App. \n\n\nClick on \"Print customers\" from File menu. \n\n\nAdd labels and fields to report. \n\n\nClose Designer window. \n\n\nClose App. \n\n\nAdd rpt.Print to FilePrintCustomers event. \n\n\nRun App. \n\n\nClick on \"Print customers\" from File menu.\n\n\n\n\nA video show an example \nhere\n. \n\n\nCode for Designer\n\n\nDim f As FolderItem= SpecialFolder.Desktop.Child(\nDBReportTut02.xml\n)\nDim r As Recordset= App.Orders.FindCustomersByName\n\nDim rpt As New DBReport(f, r)\nrpt.Designer\nrpt.SaveXML(f)\n\n\n\n\nTutorial: Using templates\n\n\nThis is a tutorial about how use templates in DBReport. The goal is create a report based on previous saved report. \n\n\nA template is just a report definition previously saved witch is imported in designer. Is useful for save time with similar reports. \n\n\nRequirements\n\n\n\n\nBasic usage tutorial.\n\n\n\n\nWalkthrough\n\n\n\n\nRename \"DBReportTut01.xml\" file to \"Template.xml\". \n\n\nOpen Tutorial01 project. \n\n\nOpen Action event of Designer button. \n\n\nChange rpt.Designer line. \n\n\nSave project as Tutorial03. \n\n\nRun App. \n\n\nClick on Designer button. \n\n\nClick on Export button. \n\n\nChoose \"Import\" from popup menu. \n\n\nSelect \"Template.xml\" from desktop. \n\n\n\n\nA video show an example \nhere\n. \n\n\nCode for Designer\n\n\nrpt.Designer \n{\nShowExpImpBtn\n: True}\n\n\n\n\n\nTutorial: Store in database\n\n\nIn this tutorial a database is used for store report definition. The goal is save and retrieve a report definition from a column table of database.\n\n\nRequirements\n\n\n\n\nBasic usage tutorial. \n\n\nA sakila_rpts SQLite database (is found in \ndownloaded\n file). \n\n\n\n\nWalkthrough\n\n\n\n\nOpen Tutorial01 project. \n\n\nAdd sakila_rpts database. \n\n\nAdd a button, change caption to \"Desig. db\". \n\n\nAdd code for Desig. db to Action event. \n\n\nAdd a button, change caption to \"Print db\". \n\n\nAdd code for Print db to Action event. \n\n\nSave project as Tutorial04 \n\n\nRun app. \n\n\nClick on Desig. db button. \n\n\nClick on Export button. \n\n\nChoose \"Import\" from popup menu. \n\n\nSelect \"Template.xml\" from desktop. \n\n\n\n\nA video show an example \nhere\n.\n\n\nCode for \"Desig. db\" button\n\n\nDim s As String\nDim i As Boolean\nDim r As RecordSet= sakila_rpts.SQLSelect(\nSELECT * FROM  reports WHERE name= 'Tutorial04';\n)\n\nIf r\n Nil Then\n  If Not r.EOF Then\n    s= r.Field(\ndefinition\n).StringValue\n  Else\n    i= True //INSERT\n  End If\nEnd If\n\nr= sakila.SQLSelect(\nSELECT * FROM customer\n)\n\nDim rpt As New DBReport(s, r)\nrpt.Designer \n{\nShowExpImpBtn\n: True}\n\n\n// Prepare statement\nDim p As PreparedSQLStatement\n\nIf i Then\n  p= sakila_rpts.Prepare(\nINSERT INTO reports (group_name, name, definition) VALUES ('Tutorials', ?, ?)\n)\nElse\n  p= sakila_rpts.Prepare(\nUPDATE reports SET name= ? WHERE definition= ?\n)\nEnd If\np.BindType(0, SQLitePreparedStatement.SQLITE_TEXT)\np.BindType(1, SQLitePreparedStatement.SQLITE_TEXT)\n\np.SQLExecute(\nTutorial04\n, rpt.GetXML)\n\n\n\n\nCode for \"Printer db\" button\n\n\nDim s As String\nDim r As RecordSet= sakila_rpts.SQLSelect(\nSELECT * FROM  reports WHERE name= 'Tutorial04';\n)\n\nIf r\n Nil Then\n  s= r.Field(\ndefinition\n).StringValue\nEnd If\n\nr= sakila.SQLSelect(\nSELECT * FROM customer\n)\n\nDim rpt As New DBReport(s, r)\n\nrpt.Print\n\n\n\n\n\n\nCommunity\n\n\n\n\nBlog\n\n\n\n\nSupport\n\n\n\n\nIssue tracker\n\n\n\n\nCredits\n\n\nMany people helped me in this project: Rodrigo Erazo, Carlos Hern\u00e1n Mu\u00f1oz, Andy Marshman, Wayne Golding, Peter Fargo, Andre Kuiper, Rolf Genster (German corrections), the rhCharts guy, Alwaysbusy's corner (gradient and other stuff), and all of request a demo.", 
            "title": "Home"
        }, 
        {
            "location": "/#dbreport", 
            "text": "Is a  Xojo/(Real Basic)  component for reports.  See here  by Bernardo Monsalve.", 
            "title": "DBReport"
        }, 
        {
            "location": "/#introduction", 
            "text": "DBReport is a Xojo (formerly known as Realbasic) component to create, edit and print reports in runtime; unlike Xojo Report which is good enough for simple reporting from databases, however don\u2019t have an editor in runtime, formulas, parameters and other features.", 
            "title": "Introduction"
        }, 
        {
            "location": "/#main-features", 
            "text": "Edit report in runtime.   Report definition to .xml or String (to save in a DB field).   Preview of report.   View dataset of records.   Width, height, margins set or import from printer.   Report Header, Report Footer, Page Header, Pager Footer and group bands.   Labels, fields, lines, rectangles, images, charts (bar, line,pie), barcodes.   Sum, count and subtotal functions.   Formulas.   Parameters.   SubReports.", 
            "title": "Main features"
        }, 
        {
            "location": "/#requirements", 
            "text": "DBReport is pure Xojo (RealBasic) code, don't need plug-ins (however can use  BarcodeMBS  and  DynaPDFMBS ), tested from RealStudio 2011r4 to Xojo 2017r1.1. Cocoa framework on MacOS is required. You need a registration code which is obtained (for free or open-source projects) by sending an email to lbmonsalve at outlook.com, otherwise works in DEMO mode.", 
            "title": "Requirements"
        }, 
        {
            "location": "/#adding-the-component", 
            "text": "", 
            "title": "Adding the component"
        }, 
        {
            "location": "/#adding-component", 
            "text": "Download the zip file, extract files.   Open Xojo (RealStudio) project or create one.   Add DBReport* files from DBReport folder. You can add one-by-one using File\u2192Import or drag'n drop folder or files to project's tab.", 
            "title": "Adding Component"
        }, 
        {
            "location": "/#register-the-component", 
            "text": "While the component is not registered works in DEMO mode, which meaning when print it, shows \"*demo*\" randomly. To register the component, add the next code just one time (perhaps on App.Open event) before use:   DBReport.Register=  YOUR REGISTER CODE...", 
            "title": "Register the component"
        }, 
        {
            "location": "/#report-structure", 
            "text": "A report consists of bands that have elements which are stored in a definition file or a text string. The report is usually assigned a recordset from database and is printed or displayed on screen.", 
            "title": "Report structure"
        }, 
        {
            "location": "/#bands", 
            "text": "To understand how the DBReport works we need to understand the concept of bands.   A band is a box where we put objects, the most important band is  Detail  which is the only one who can not erase. This (Detail) is printed for each row or record of the RecordSet, eg. if we have 10 rows or records we have 10 bands Detail.   The band  Page header  is printed first in the top of the page for each page in the report generated.   The band  Page footer  is printed on the bottom of the page for each page in the report generated.   The band  Report header  is printed after the band page header on the first page of the report.   The band  Report footer  is printed just after the last band printed on the final page of the report.   Group bands are bands that are printed before the band  Detail  like  Group Header  and then like  Group Footer . They print to change the group (field of a recordset) or at the beginning of the report in the case of Group Header or end of the report in case of Group Footer. You can have as many group bands as needed.", 
            "title": "Bands"
        }, 
        {
            "location": "/#elements", 
            "text": "The objects that can be placed in the bands are:    Labels : are texts like \u201cTitle Report\u201d or the system date as \u201c#date\u201d or page number like \u201c#pag\u201d or parameters or formulas.   Fields : field of Recordset like \u201cname\u201d or \u201cid\u201d.   Lines : horizontal, vertical or oblique.   Rectangles  boxes or rounded rectangles.   Barcodes .   Images : Can be an image file, parameter or a RecordSet field.   Charts : Bar, lines, pie.   SubReports .    Note: Use XojoScript (RBScript) in formulas with \u201cSetValue EXPRESSION\u201d like:   SetValue (10+5)* RecNum+ (2* .1* RecNum)\n' or\nSetValue  String \n' or\nSetValue ElementName* ParameterName\n' or\nSetValue Left(FieldName1, 10)+    + FieldName2\n' or\nIf FieldName1.InStr( cad )= 0 Then\n    SetValue  No Contains cad \nElse\n    SetValue  Contains cad \nEnd", 
            "title": "Elements"
        }, 
        {
            "location": "/#parameters", 
            "text": "A parameter is assigned before calling the Designer or Print (\u201cLogo\u201d is an example, may be called as you want):  rpt.Parameter( Logo )= PictureObject\nrpt.Parameter( CompanyName )=  My Company Name", 
            "title": "Parameters"
        }, 
        {
            "location": "/#properties", 
            "text": "A property in DBReport is a special data used outside of report for whatever you want, example: save the database name or SQL string. Is used as metadata of report, but not in report itself.   rpt.Prop( sqlString )=  SELECT * FROM table \nrpt.Prop( databaseName )=  MyDB", 
            "title": "Properties"
        }, 
        {
            "location": "/#xml-definition-file", 
            "text": "The definition of report is in XML structure, you can change the extension of file whatever you like. This is an example:   ?xml version= 1.0  encoding= UTF-8 ?  DBReport Version= 1.3.1007 \n   SubReport \n     Band id= 1  Name= ReporHeader1  Type= 30 / \n     Band id= 2  Name= Detail  Height= 20 / \n     Band id= 3  Name= ReportFooter1  Type= 40  Height= 58 / \n     Element id= 4  Name= Element1  BandId= 1  Left= 2  Top= 7  Value= Title of report  OrderToShow= 0 / \n     Element id= 5  Name= Element2  DataField= name  BandId= 2  Left= 4  Top= 3  Type= 20  OrderToShow= 0 / \n     Element id= 6  Name= Element3  BandId= 1  Left= 455  Top= 11  Value= #pag  OrderToShow= 1 / \n     Element id= 7  Name= Element4  BandId= 3  Left= 235  Top= 3  Value= #date  AlignH= 1  OrderToShow= 0 / \n   /SubReport  /DBReport", 
            "title": "XML Definition file"
        }, 
        {
            "location": "/#xml-preferences-file", 
            "text": "DBReport saves preferences like position of Designer window or zoom in a preferences.xml file in: SpecialFolder.ApplicationData.Child(\"DBReport\").", 
            "title": "XML Preferences file"
        }, 
        {
            "location": "/#examples", 
            "text": "", 
            "title": "Examples"
        }, 
        {
            "location": "/#modify-report", 
            "text": "RecordSet variable \"rs\" must be exist.  Dim rpt As New DBReport\n\nDim f as FolderItem= SpecialFolder.Documents.Child( DBReport1.xml )\nrpt.LoadXML(f)\nrpt.RecordSet= rs\nrpt.Designer\nrpt.SaveXML(f)  If you want store the definition of report on string variable:  Dim rpt As New DBReport\n\nrpt.LoadXML(StringVariable)\nrpt.RecordSet= rs\nrpt.Designer\nStringVariable= rpt.GetXML()", 
            "title": "Modify report"
        }, 
        {
            "location": "/#print-report", 
            "text": "Dim rpt As DBReport\nDim f as FolderItem= SpecialFolder.Documents.Child( DBReport1.xml )\n\nrpt= New DBReport(f, rs)\n\nrpt.Print", 
            "title": "Print report"
        }, 
        {
            "location": "/#preview-report", 
            "text": "The report and RecordSet must be exist and assign RecordSet to report. Add \"DBReportPreview\" controlContainer to a window, assign report to controlContainer:   DBReportPreview1.Report(rptVariable)", 
            "title": "Preview report"
        }, 
        {
            "location": "/#other-form-to-use", 
            "text": "DBReportDesignerControl and DBReportPreview are ControlContainers, you can place on a Window, set it and used like another control eg. TextField or TextArea.   You can add DBReportDesignerControl to a window and set report with:  DBReportDesignerControl1.Report(rpt) , you need save the changes with a button with action like:  rpt.SaveXML(f) . Maybe another button for print.   Also you can create reports by coding:  Dim sRpt As New DBReportSubReport\n\nDim bnd As New DBReportBand\nbnd.Name=  PageHeader \nbnd.Type= Int32(DBReportBand.BandType.PageHeader)\nsRpt.BandAdd(bnd)\n\nDim ele As New DBReportElement\nele.BandId= bnd.Id\nele.Type= Int32(DBReportElement.ElementType.Label)\nele.Value=  Title \nsRpt.ElementAdd(ele)\n\nbnd= New DBReportBand\nbnd.Name=  Detail1 \nbnd.Type= Int32(DBReportBand.BandType.Detail)\nbnd.Height= 20\nsRpt.BandAdd(bnd)\n\nele= New DBReportElement\nele.BandId= bnd.Id\nele.Type= Int32(DBReportElement.ElementType.Field)\nele.DataField=  name \nele.Left= 30\nele.Top= 1\nele.Width= 300\nele.HeightExpand= True\nsRpt.ElementAdd(ele)\n\nbnd= New DBReportBand\nbnd.Name=  PageFooter \nbnd.Type= Int32(DBReportBand.BandType.PageFooter)\nbnd.Height= 58\nsRpt.BandAdd(bnd)\n\nele= New DBReportElement\nele.BandId= bnd.Id\nele.Type= Int32(DBReportElement.ElementType.Label)\nele.Value=  #pag \nsRpt.ElementAdd(ele)\n\nDim rpt As New DBReport\nrpt.SubReportAdd(sRpt)", 
            "title": "Other form to use"
        }, 
        {
            "location": "/#tutorial-basic", 
            "text": "This tutorial is basic use of DBReport. The goal is create two buttons, one for designer and other for print a report.", 
            "title": "Tutorial: Basic"
        }, 
        {
            "location": "/#requirements_1", 
            "text": "DBReport component.   A sample SQLite database (sakila database is used for this tutorial, is found in  downloaded  file).", 
            "title": "Requirements"
        }, 
        {
            "location": "/#walkthrough", 
            "text": "Create a project.   Add DBReport component.   Add SQLite database.   Add a button, change caption to \"Designer\".   Add code for Designer to Action event.   Add a button, change caption to \"Print\".   Add code for Print to Action event.   Run app.   Click on Designer button.   Add labels and fields to report.   Close designer window.   Click on Print button.    A video show an example  here .", 
            "title": "Walkthrough"
        }, 
        {
            "location": "/#code-for-designer-button", 
            "text": "Dim f As FolderItem= SpecialFolder.Desktop.Child( DBReportTut01.xml )\nDim r As Recordset= sakila.SQLSelect( SELECT * FROM customer )\n\nDim rpt As New DBReport(f, r)\nrpt.Designer\nrpt.SaveXML(f)", 
            "title": "Code for Designer button"
        }, 
        {
            "location": "/#code-for-print-button", 
            "text": "Dim f As FolderItem= SpecialFolder.Desktop.Child( DBReportTut01.xml )\nDim r As Recordset= sakila.SQLSelect( SELECT * FROM customer )\n\nDim rpt As New DBReport(f, r)\n\nrpt.Print", 
            "title": "Code for Print button"
        }, 
        {
            "location": "/#tutorial-add-reports", 
            "text": "This tutorial adds a report to existing app. The goal is create a menuItem for design and print. Use the EddiesElectronics desktop app, On \"Project chooser\" window select Examples, \"Sample Applications\"/EddiesElectronics/Desktop folder and open EEDesktop.xojo_binary_project file.", 
            "title": "Tutorial: Add reports"
        }, 
        {
            "location": "/#requirements_2", 
            "text": "DBReport component.   EEDesktop example app.", 
            "title": "Requirements"
        }, 
        {
            "location": "/#walkthrough_1", 
            "text": "Open EEDesktop app from \"Project chooser\" window.   Add DBReport component.   Add menuItem to File menu on MainMenuBar.   Change Name to \"FilePrintCustomers\".   Change Text to \"Print customers\".   Navigate to \"Menu Handlers\" from CustomerDetailWindow.   Add \"Menu Handler\" event.   Choose FilePrintCustomers from MenuItem name.   Add code for Designer.   Run App.   Click on \"Print customers\" from File menu.   Add labels and fields to report.   Close Designer window.   Close App.   Add rpt.Print to FilePrintCustomers event.   Run App.   Click on \"Print customers\" from File menu.   A video show an example  here .", 
            "title": "Walkthrough"
        }, 
        {
            "location": "/#code-for-designer", 
            "text": "Dim f As FolderItem= SpecialFolder.Desktop.Child( DBReportTut02.xml )\nDim r As Recordset= App.Orders.FindCustomersByName\n\nDim rpt As New DBReport(f, r)\nrpt.Designer\nrpt.SaveXML(f)", 
            "title": "Code for Designer"
        }, 
        {
            "location": "/#tutorial-using-templates", 
            "text": "This is a tutorial about how use templates in DBReport. The goal is create a report based on previous saved report.   A template is just a report definition previously saved witch is imported in designer. Is useful for save time with similar reports.", 
            "title": "Tutorial: Using templates"
        }, 
        {
            "location": "/#requirements_3", 
            "text": "Basic usage tutorial.", 
            "title": "Requirements"
        }, 
        {
            "location": "/#walkthrough_2", 
            "text": "Rename \"DBReportTut01.xml\" file to \"Template.xml\".   Open Tutorial01 project.   Open Action event of Designer button.   Change rpt.Designer line.   Save project as Tutorial03.   Run App.   Click on Designer button.   Click on Export button.   Choose \"Import\" from popup menu.   Select \"Template.xml\" from desktop.    A video show an example  here .", 
            "title": "Walkthrough"
        }, 
        {
            "location": "/#code-for-designer_1", 
            "text": "rpt.Designer  { ShowExpImpBtn : True}", 
            "title": "Code for Designer"
        }, 
        {
            "location": "/#tutorial-store-in-database", 
            "text": "In this tutorial a database is used for store report definition. The goal is save and retrieve a report definition from a column table of database.", 
            "title": "Tutorial: Store in database"
        }, 
        {
            "location": "/#requirements_4", 
            "text": "Basic usage tutorial.   A sakila_rpts SQLite database (is found in  downloaded  file).", 
            "title": "Requirements"
        }, 
        {
            "location": "/#walkthrough_3", 
            "text": "Open Tutorial01 project.   Add sakila_rpts database.   Add a button, change caption to \"Desig. db\".   Add code for Desig. db to Action event.   Add a button, change caption to \"Print db\".   Add code for Print db to Action event.   Save project as Tutorial04   Run app.   Click on Desig. db button.   Click on Export button.   Choose \"Import\" from popup menu.   Select \"Template.xml\" from desktop.    A video show an example  here .", 
            "title": "Walkthrough"
        }, 
        {
            "location": "/#code-for-desig-db-button", 
            "text": "Dim s As String\nDim i As Boolean\nDim r As RecordSet= sakila_rpts.SQLSelect( SELECT * FROM  reports WHERE name= 'Tutorial04'; )\n\nIf r  Nil Then\n  If Not r.EOF Then\n    s= r.Field( definition ).StringValue\n  Else\n    i= True //INSERT\n  End If\nEnd If\n\nr= sakila.SQLSelect( SELECT * FROM customer )\n\nDim rpt As New DBReport(s, r)\nrpt.Designer  { ShowExpImpBtn : True} \n\n// Prepare statement\nDim p As PreparedSQLStatement\n\nIf i Then\n  p= sakila_rpts.Prepare( INSERT INTO reports (group_name, name, definition) VALUES ('Tutorials', ?, ?) )\nElse\n  p= sakila_rpts.Prepare( UPDATE reports SET name= ? WHERE definition= ? )\nEnd If\np.BindType(0, SQLitePreparedStatement.SQLITE_TEXT)\np.BindType(1, SQLitePreparedStatement.SQLITE_TEXT)\n\np.SQLExecute( Tutorial04 , rpt.GetXML)", 
            "title": "Code for \"Desig. db\" button"
        }, 
        {
            "location": "/#code-for-printer-db-button", 
            "text": "Dim s As String\nDim r As RecordSet= sakila_rpts.SQLSelect( SELECT * FROM  reports WHERE name= 'Tutorial04'; )\n\nIf r  Nil Then\n  s= r.Field( definition ).StringValue\nEnd If\n\nr= sakila.SQLSelect( SELECT * FROM customer )\n\nDim rpt As New DBReport(s, r)\n\nrpt.Print", 
            "title": "Code for \"Printer db\" button"
        }, 
        {
            "location": "/#community", 
            "text": "Blog", 
            "title": "Community"
        }, 
        {
            "location": "/#support", 
            "text": "Issue tracker", 
            "title": "Support"
        }, 
        {
            "location": "/#credits", 
            "text": "Many people helped me in this project: Rodrigo Erazo, Carlos Hern\u00e1n Mu\u00f1oz, Andy Marshman, Wayne Golding, Peter Fargo, Andre Kuiper, Rolf Genster (German corrections), the rhCharts guy, Alwaysbusy's corner (gradient and other stuff), and all of request a demo.", 
            "title": "Credits"
        }, 
        {
            "location": "/classes/", 
            "text": "Classes\n\n\nDBReport\n\n\nProperties\n\n\nMethods\n\n\nShared Properties\n\n\nShared Methods\n\n\nConstructors\n\n\nClass Constants\n\n\nExamples\n\n\nModify report:\n\n\nDim rpt As New DBReport\n\nDim f as FolderItem= SpecialFolder.Documents.Child(\nDBReport1.xml\n)\nrpt.LoadXML f\nrpt.RecordSet= rs // rs RecordSet must be exist\nrpt.Designer\nrpt.SaveXML(f)\n\n\n\n\nor\n\n\nDim rpt As New DBReport\n\nrpt.LoadXML(StringVariable)\nrpt.RecordSet= rs // rs RecordSet must be exist\nrpt.Designer\nStringVariable= rpt.GetXML()\n\n\n\n\nPrinte report:\n\n\nDim f as FolderItem= SpecialFolder.Documents.Child(\nDBReport1.xml\n)\n\nDim rpt As New DBReport(f, rs) // rs RecordSet must be exist\nrpt.Print\n\n\n\n\n\n\nDBReportDesignerControl\n\n\n\n\nDBReportPreview\n\n\n\n\nDBReportShared", 
            "title": "Classes"
        }, 
        {
            "location": "/classes/#classes", 
            "text": "", 
            "title": "Classes"
        }, 
        {
            "location": "/classes/#dbreport", 
            "text": "", 
            "title": "DBReport"
        }, 
        {
            "location": "/classes/#properties", 
            "text": "", 
            "title": "Properties"
        }, 
        {
            "location": "/classes/#methods", 
            "text": "", 
            "title": "Methods"
        }, 
        {
            "location": "/classes/#shared-properties", 
            "text": "", 
            "title": "Shared Properties"
        }, 
        {
            "location": "/classes/#shared-methods", 
            "text": "", 
            "title": "Shared Methods"
        }, 
        {
            "location": "/classes/#constructors", 
            "text": "", 
            "title": "Constructors"
        }, 
        {
            "location": "/classes/#class-constants", 
            "text": "", 
            "title": "Class Constants"
        }, 
        {
            "location": "/classes/#examples", 
            "text": "Modify report:  Dim rpt As New DBReport\n\nDim f as FolderItem= SpecialFolder.Documents.Child( DBReport1.xml )\nrpt.LoadXML f\nrpt.RecordSet= rs // rs RecordSet must be exist\nrpt.Designer\nrpt.SaveXML(f)  or  Dim rpt As New DBReport\n\nrpt.LoadXML(StringVariable)\nrpt.RecordSet= rs // rs RecordSet must be exist\nrpt.Designer\nStringVariable= rpt.GetXML()  Printe report:  Dim f as FolderItem= SpecialFolder.Documents.Child( DBReport1.xml )\n\nDim rpt As New DBReport(f, rs) // rs RecordSet must be exist\nrpt.Print", 
            "title": "Examples"
        }, 
        {
            "location": "/classes/#dbreportdesignercontrol", 
            "text": "", 
            "title": "DBReportDesignerControl"
        }, 
        {
            "location": "/classes/#dbreportpreview", 
            "text": "", 
            "title": "DBReportPreview"
        }, 
        {
            "location": "/classes/#dbreportshared", 
            "text": "", 
            "title": "DBReportShared"
        }, 
        {
            "location": "/release/", 
            "text": "Release notes\n\n\n1.4.3509\n\n\n* Add: DBReport.ParametersClear.\n- Fix: copies on windows print dialog.\n- Fix: Zoom control on mac works.\n\n\n1.4.3316\n\n\n* Add: Preview HiDPI (test).\n- Fix: drag'n drop on mac (recurrent v1.3.1122).\n\n\n1.4.3227\n\n\n- Fix: Scanner don't read printed barcodes.\n\n\n1.4.2916\n\n\n- Fix: KeyNotFoundException on average fn.\n\n\n1.4.2913\n\n\n* Add: Element Average function.\n\n\n1.4.2823\n\n\n* Add import for OnTargetReports on LoadXML(...).\n* Add Changed Function.\n* Add better encryption algorithm.\n* Add support to CEF on formula editor, https://github.com/tempelmann/custom-editfield.\n\n\n1.4.2819\n\n\n- Fixed: console issues.\n* Add SetForeColor, SetBackColor, SQLDateTime, TotalSeconds to formula.\n\n\n1.4.2815\n\n\n- Fixed: Error on formula when element names has space.\n* Add right-click on schema/parameters for deleted.\n* Add drag\ndrop from schema to canvas.\n\n\n1.4.2313\n\n\n- Fixed: Group delete.\n\n\n1.4.2229\n\n\n* Generate subreports collections with SubReportAddInBand.\n\n\n1.4.2226\n\n\n* Add MBSDynaPDF support.\n* Constants kBarcodeEngine, kRenderEngineExcel, kRenderEnginePDF on DBReportShared module changed.\n\n\n1.4.2201\n\n\n- Fixed \"PM\" string when fomat date between 12-13 hours.\n\n\n1.4.1717\n\n\n* Add shared property DBReport.RecordSetEncoding.\n- Fixed MSSQL double issue.\n\n\n1.4.1428\n\n\n- Fixed values with EndOfLine in formula.\n\n\n1.4.1427\n\n\n- Fixed multiline element cause bad behavior.\n- Fixed subtotal on MacOS and Xojo 2014+ round problem.\n\n\n1.4.1403\n\n\n- object exception when print with HotSpot element is enable; fixed.\n- format of dates on GroupFooter fixed.\n* Images resolution enhanced of PDF objs (barcode, rotateText, charts).\n\n\n1.4.1211\n\n\n- \"...more than one item with this name...\" bug on 2014r3 fixed.\n- Error on preview when the page # \n 1 fixed.\n- Images on DBReportPDF preserve the resolution now.\n\n\n1.4.1204\n\n\n* Add demo reports from sakila db.\n* Add unit-test.\n* Add BarcodeMBS support.\n- Leyend on charts fixed\n\n\n1.4.0917\n\n\n* Add order to print on columns.\n\n\n1.4.0704\n\n\n* Add format on date field: ShortDate,LongDate,ShortTime,LongTime - thanks Wayne.\n- Count issue fixed\n\n\n1.4.0702\n\n\n- Calculation issue on formula in same band fixed.\n\n\n1.4.0620\n\n\n* Add HotSpot areas to DBReportPreview control.\n* Add Listbox property for using as recordset.\n* Add support to barcode with Simbarcodes module.\n* Change icons.\n- Minor bugs fixed.\n\n\n1.3.1804\n\n\n* Add FormatDateTime(stringDateSQLFormat, \"format\") function to Formula Editor.\n* Calc height of element when change font size.\n* Add new elements with last Font Size, height element.\n- Fixed when fieldNumber of recordset are null.\n\n\n1.3.1625\n\n\n- Calc function values when band is hide.\n\n\n1.3.1616\n\n\n* Add format to Date/time values \"[dmyhisDYHAwWzlF]\" or \"%+[dmyhisDYHAwWzlF]\" Check http://php.net/manual/en/function.date.php.\n\n\n1.3.1611\n\n\n* Add Field(\"fieldName\"), TotalSeconds(\"FieldName\") Parameter(\"ParamName\") functions to Formula Editor.\n* Add Sum, Subtotal Functions to labels elements.\n\n\n1.3.1531\n\n\n* Add property DBReport.PictureQualityAllImagesPDF\n- Show negative subtotals issue fixed.\n\n\n1.3.1409\n\n\n- Some issues with subtotals on bands fixed.\n\n\n1.3.1408\n\n\n* Edit property with 1 clic and use TAB, Shift-TAB, Up and Down arrows\n\n\n1.3.1405\n\n\n- MemoryBlock error when Picture field is Nul, fixed.\n\n\n1.3.1402\n\n\n- Some elements no show on designer, fixed.\n- Weird scrollBars behavior when delete an element, fixed.\n\n\n1.3.1311\n\n\n* Render to PDF with internal render.\n\n\n1.3.1129\n\n\n* Label rotation implemented.\n* Change DPI implemented.\n- Now works secondary mouse button on Mac.\n\n\n1.3.1125\n\n\n- Boolean mapping on RBScript fixed.\n\n\n1.3.1122\n\n\n* New form to handle lines.\n- Mac drag'n drop fixed.\n\n\n1.3.1120\n\n\n- Delete band with subreports bug fixed.\n- Copy and paste between subreports fixed.\n\n\n1.3.1118\n\n\n* SubReports implemented.\n* New Constructors:DBReport(FolderItem, RecordSet), DBReport(String, RecordSet)\n* Some methods on DBReportSubReport are deprecated, delete on future releases.\n* Limits for elements implemented.\n* Scale images now is proportional.\n* Add Branding: DBReport.BrandName= \"Your brand\".\n\n\n1.3.1017\n\n\n* Format date fields with user locale format.\n- ODBC fixed bug.\n- Print on thread disable on mac.\n- Zoom with wheel on Mac disable.\n\n\n1.3.1007\n\n\n* Register component implemented.\n* Grid and SnapToGrid implemented.\n* Print on thread implemented.\n* Cache on preview +100 (settable) pages on disk.\n* Propierties implemented.\n* Translate to German thanks to Rolf Gengster (rgenster@genster.com).\n- Changing size of element on MacOS fixed, others bugs fixed.\n\n\n1.2.0907\n\n\n* Rename \"DBReportDesingerControl.rbw\" by \"DBReportDesignerControl.rbw\"\n- Wrong Count function value fixed, fixed several bugs\n\n\n1.2.0830:\n\n\n* Charts implemented, fixed several bugs.\n\n\n1.2.0725:\n\n\n* SendBack implemented, fixed several bugs, new colors.\n- Images deleted!, no more used.\n\n\n1.2.0723:\n\n\n* Print group in new page, print element according to condition.\n\n\n1.1.0115:\n\n\n* Parameters implemented; PrinterSettings and PrinterPOSDevice implemented.\n\n\n1.1.0112:\n\n\n* Multiline in POS report implemented.\n* Export/Import from designer implemented.\n- Fix parcialy/ bug in Listbox 64+ columns.\n* Show properties in Schema implemented.\n* Save preferences implemented.\n\n\n1.0.1220:\n\n\n* Measures units implemented.\n* Columns implemented\n* Select elements and move with arrows keys implemented.\n* Show position in ruler implemented.\n\n\n1.0.1130:\n\n\n* Formula editor implemented.\n- Fixed bugs: Ctrl+C, Preview, goto N pag.\n\n\n1.0.1128:\n\n\n* Dialog to print implemented.\n* Print to POS implemented.\n* Interface change: controls positions.\n\n\n1.0.1123:\n\n\n- Fixed error preview control.\n* Goto N page in Preview.\n\n\n1.0.1112:\n\n\n* To set parameter don't need subreport reference, ej: rpt.Parameter(\"StartDate\")= \"01/01/2012\"\n* Color change on selected element, Repeat, Show 0, Ctrl+C y Ctrl+V.\n* change preview buttons position.\n\n\n* Initial release", 
            "title": "Release Notes"
        }, 
        {
            "location": "/release/#release-notes", 
            "text": "1.4.3509  * Add: DBReport.ParametersClear.\n- Fix: copies on windows print dialog.\n- Fix: Zoom control on mac works.  1.4.3316  * Add: Preview HiDPI (test).\n- Fix: drag'n drop on mac (recurrent v1.3.1122).  1.4.3227  - Fix: Scanner don't read printed barcodes.  1.4.2916  - Fix: KeyNotFoundException on average fn.  1.4.2913  * Add: Element Average function.  1.4.2823  * Add import for OnTargetReports on LoadXML(...).\n* Add Changed Function.\n* Add better encryption algorithm.\n* Add support to CEF on formula editor, https://github.com/tempelmann/custom-editfield.  1.4.2819  - Fixed: console issues.\n* Add SetForeColor, SetBackColor, SQLDateTime, TotalSeconds to formula.  1.4.2815  - Fixed: Error on formula when element names has space.\n* Add right-click on schema/parameters for deleted.\n* Add drag drop from schema to canvas.  1.4.2313  - Fixed: Group delete.  1.4.2229  * Generate subreports collections with SubReportAddInBand.  1.4.2226  * Add MBSDynaPDF support.\n* Constants kBarcodeEngine, kRenderEngineExcel, kRenderEnginePDF on DBReportShared module changed.  1.4.2201  - Fixed \"PM\" string when fomat date between 12-13 hours.  1.4.1717  * Add shared property DBReport.RecordSetEncoding.\n- Fixed MSSQL double issue.  1.4.1428  - Fixed values with EndOfLine in formula.  1.4.1427  - Fixed multiline element cause bad behavior.\n- Fixed subtotal on MacOS and Xojo 2014+ round problem.  1.4.1403  - object exception when print with HotSpot element is enable; fixed.\n- format of dates on GroupFooter fixed.\n* Images resolution enhanced of PDF objs (barcode, rotateText, charts).  1.4.1211  - \"...more than one item with this name...\" bug on 2014r3 fixed.\n- Error on preview when the page #   1 fixed.\n- Images on DBReportPDF preserve the resolution now.  1.4.1204  * Add demo reports from sakila db.\n* Add unit-test.\n* Add BarcodeMBS support.\n- Leyend on charts fixed  1.4.0917  * Add order to print on columns.  1.4.0704  * Add format on date field: ShortDate,LongDate,ShortTime,LongTime - thanks Wayne.\n- Count issue fixed  1.4.0702  - Calculation issue on formula in same band fixed.  1.4.0620  * Add HotSpot areas to DBReportPreview control.\n* Add Listbox property for using as recordset.\n* Add support to barcode with Simbarcodes module.\n* Change icons.\n- Minor bugs fixed.  1.3.1804  * Add FormatDateTime(stringDateSQLFormat, \"format\") function to Formula Editor.\n* Calc height of element when change font size.\n* Add new elements with last Font Size, height element.\n- Fixed when fieldNumber of recordset are null.  1.3.1625  - Calc function values when band is hide.  1.3.1616  * Add format to Date/time values \"[dmyhisDYHAwWzlF]\" or \"%+[dmyhisDYHAwWzlF]\" Check http://php.net/manual/en/function.date.php.  1.3.1611  * Add Field(\"fieldName\"), TotalSeconds(\"FieldName\") Parameter(\"ParamName\") functions to Formula Editor.\n* Add Sum, Subtotal Functions to labels elements.  1.3.1531  * Add property DBReport.PictureQualityAllImagesPDF\n- Show negative subtotals issue fixed.  1.3.1409  - Some issues with subtotals on bands fixed.  1.3.1408  * Edit property with 1 clic and use TAB, Shift-TAB, Up and Down arrows  1.3.1405  - MemoryBlock error when Picture field is Nul, fixed.  1.3.1402  - Some elements no show on designer, fixed.\n- Weird scrollBars behavior when delete an element, fixed.  1.3.1311  * Render to PDF with internal render.  1.3.1129  * Label rotation implemented.\n* Change DPI implemented.\n- Now works secondary mouse button on Mac.  1.3.1125  - Boolean mapping on RBScript fixed.  1.3.1122  * New form to handle lines.\n- Mac drag'n drop fixed.  1.3.1120  - Delete band with subreports bug fixed.\n- Copy and paste between subreports fixed.  1.3.1118  * SubReports implemented.\n* New Constructors:DBReport(FolderItem, RecordSet), DBReport(String, RecordSet)\n* Some methods on DBReportSubReport are deprecated, delete on future releases.\n* Limits for elements implemented.\n* Scale images now is proportional.\n* Add Branding: DBReport.BrandName= \"Your brand\".  1.3.1017  * Format date fields with user locale format.\n- ODBC fixed bug.\n- Print on thread disable on mac.\n- Zoom with wheel on Mac disable.  1.3.1007  * Register component implemented.\n* Grid and SnapToGrid implemented.\n* Print on thread implemented.\n* Cache on preview +100 (settable) pages on disk.\n* Propierties implemented.\n* Translate to German thanks to Rolf Gengster (rgenster@genster.com).\n- Changing size of element on MacOS fixed, others bugs fixed.  1.2.0907  * Rename \"DBReportDesingerControl.rbw\" by \"DBReportDesignerControl.rbw\"\n- Wrong Count function value fixed, fixed several bugs  1.2.0830:  * Charts implemented, fixed several bugs.  1.2.0725:  * SendBack implemented, fixed several bugs, new colors.\n- Images deleted!, no more used.  1.2.0723:  * Print group in new page, print element according to condition.  1.1.0115:  * Parameters implemented; PrinterSettings and PrinterPOSDevice implemented.  1.1.0112:  * Multiline in POS report implemented.\n* Export/Import from designer implemented.\n- Fix parcialy/ bug in Listbox 64+ columns.\n* Show properties in Schema implemented.\n* Save preferences implemented.  1.0.1220:  * Measures units implemented.\n* Columns implemented\n* Select elements and move with arrows keys implemented.\n* Show position in ruler implemented.  1.0.1130:  * Formula editor implemented.\n- Fixed bugs: Ctrl+C, Preview, goto N pag.  1.0.1128:  * Dialog to print implemented.\n* Print to POS implemented.\n* Interface change: controls positions.  1.0.1123:  - Fixed error preview control.\n* Goto N page in Preview.  1.0.1112:  * To set parameter don't need subreport reference, ej: rpt.Parameter(\"StartDate\")= \"01/01/2012\"\n* Color change on selected element, Repeat, Show 0, Ctrl+C y Ctrl+V.\n* change preview buttons position.  * Initial release", 
            "title": "Release notes"
        }, 
        {
            "location": "/license/", 
            "text": "License\n\n\nDBReport Xojo (Real Studio) component License (v1.0.1120).\n\n\nCopyright (C) 2013-2017 Bernardo Monsalve (lbmonsalve@outlook.com).\n\n\nThis is the DBReport (\u201ccomponent\u201d) limited use License Agreement,\nwhich governs your use of any component software products\n(Licensed Program) and User file(s) delivered with it.\n\n\nYour use of the Licensed component indicates your acceptance of\nthe terms and conditions of this Agreement. If you do not accept\nor agree with them, you must not copy or use the component.\n\n\nLicense: Bernardo Monsalve (lbmonsalve@outlook.com) hereby grants\nyou, and you accept a non-exclusive and non-transferable license,\nto use the Licensed component and file(s) on the following terms\nand conditions only:\n\n\na. The register code are for use in your develop programs, you\ncan distribute copies of a compiled version of the \"component\".\nb. You agree not to decompile, reverse engineer or modify any\npart of the \"component\".\nc. The \"Component\" Proprietary Use License covers any images,\nfiles distributed in a component. These files are copyrighted by\nBernardo Monsalve (lbmonsalve@outlook.com).\nd. You agree not to share your register code with anyone. If you\nshare source code with a person, that person must have his own\nregister code.\ne. Bernardo Monsalve reserves the right to cancel the license of\nany user who determines is in violation of this agreement.\n\n\nTHIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS \"AS IS\" AND\nANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,\nTHE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A\nPARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE\nCOPYRIGHT OWNER BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\nSPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\nLIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\nUSE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED\nAND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT\nLIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN\nANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\nPOSSIBILITY OF SUCH DAMAGE.", 
            "title": "License"
        }, 
        {
            "location": "/license/#license", 
            "text": "DBReport Xojo (Real Studio) component License (v1.0.1120).  Copyright (C) 2013-2017 Bernardo Monsalve (lbmonsalve@outlook.com).  This is the DBReport (\u201ccomponent\u201d) limited use License Agreement,\nwhich governs your use of any component software products\n(Licensed Program) and User file(s) delivered with it.  Your use of the Licensed component indicates your acceptance of\nthe terms and conditions of this Agreement. If you do not accept\nor agree with them, you must not copy or use the component.  License: Bernardo Monsalve (lbmonsalve@outlook.com) hereby grants\nyou, and you accept a non-exclusive and non-transferable license,\nto use the Licensed component and file(s) on the following terms\nand conditions only:  a. The register code are for use in your develop programs, you\ncan distribute copies of a compiled version of the \"component\".\nb. You agree not to decompile, reverse engineer or modify any\npart of the \"component\".\nc. The \"Component\" Proprietary Use License covers any images,\nfiles distributed in a component. These files are copyrighted by\nBernardo Monsalve (lbmonsalve@outlook.com).\nd. You agree not to share your register code with anyone. If you\nshare source code with a person, that person must have his own\nregister code.\ne. Bernardo Monsalve reserves the right to cancel the license of\nany user who determines is in violation of this agreement.  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS \"AS IS\" AND\nANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,\nTHE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A\nPARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE\nCOPYRIGHT OWNER BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\nSPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\nLIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\nUSE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED\nAND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT\nLIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN\nANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\nPOSSIBILITY OF SUCH DAMAGE.", 
            "title": "License"
        }
    ]
}